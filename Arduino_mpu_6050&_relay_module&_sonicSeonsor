#include <Wire.h>

#define mpu_add 0x68  //mpu6050 address

int r1 = 3;
int r2 = 4;
int trig = 5;
int echo = 6;
int es = 7;   //emergency switch

class kalman {

  public :

    double getkalman(double acc, double gyro, double dt) {

      //project the state ahead

      angle += dt * (gyro - bias) ;



      //Project the error covariance ahead

      P[0][0] += dt * (dt * P[1][1] - P[0][1] - P[1][0] + Q_angle) ;

      P[0][1] -= dt * P[1][1] ;

      P[1][0] -= dt * P[1][1] ;

      P[1][1] += Q_gyro * dt ;



      //Compute the Kalman gain

      double S = P[0][0] + R_measure ;

      K[0] = P[0][0] / S ;

      K[1] = P[1][0] / S ;



      //Update estimate with measurement z

      double y = acc - angle ;

      angle += K[0] * y ;

      bias += K[1] * y ;



      //Update the error covariance

      double P_temp[2] = {P[0][0], P[0][1]} ;

      P[0][0] -= K[0] * P_temp[0] ;

      P[0][1] -= K[0] * P_temp[1] ;

      P[1][0] -= K[1] * P_temp[0] ;

      P[1][1] -= K[1] * P_temp[1] ;



      return angle ;

    } ;

    void init(double angle, double gyro, double measure) {

      Q_angle = angle ;

      Q_gyro = gyro ;

      R_measure = measure ;



      angle = 0 ;

      bias = 0 ;



      P[0][0] = 0 ;

      P[0][1] = 0 ;

      P[1][0] = 0 ;

      P[1][1] = 0 ;

    } ;

    double getvar(int num) {

      switch (num) {

        case 0 :

          return Q_angle ;

          break ;

        case 1 :

          return Q_gyro ;

          break ;

        case 2 :

          return R_measure ;

          break ;

      }

    } ;

  private :

    double Q_angle, Q_gyro, R_measure ;

    double angle, bias ;

    double P[2][2], K[2] ;

} ;



kalman kal ;



long ac_x, ac_y, ac_z, gy_x, gy_y, gy_z ;



double deg, dgy_y ;

double dt ;

uint32_t pasttime ;



void setup() {

  // put your setup code here, to run once:

  Serial.begin(9600) ;

  Wire.begin() ;

  Wire.beginTransmission(mpu_add) ;

  Wire.write(0x6B) ;

  Wire.write(0) ;

  Wire.endTransmission(true) ;

  kal.init(0.001, 0.003, 0.03) ;  //init kalman filter

  Serial.println() ;

  Serial.print("parameter") ;

  Serial.print("\t") ;

  Serial.print(kal.getvar(0), 4) ;

  Serial.print("\t") ;

  Serial.print(kal.getvar(1), 4) ;

  Serial.print("\t") ;

  Serial.println(kal.getvar(2), 4) ;
  ////////////////////////////////////////
  pinMode(r1, OUTPUT);   //릴레이 출력
   pinMode(r2, OUTPUT);
  pinMode(trig, OUTPUT);  //초음파센서 입력
  pinMode(echo, INPUT);
   pinMode(es, INPUT_PULLUP);
  ////////////////////////////////////////

}



void loop() {

  // put your main code here, to run repeatedly:



  Wire.beginTransmission(mpu_add) ; //get acc data

  Wire.write(0x3B) ;

  Wire.endTransmission(false) ;

  Wire.requestFrom(mpu_add, 6, true) ;

  ac_x = Wire.read() << 8 | Wire.read() ;

  ac_y = Wire.read() << 8 | Wire.read() ;

  ac_z = Wire.read() << 8 | Wire.read() ;



  Wire.beginTransmission(mpu_add) ; //get gyro data

  Wire.write(0x43) ;

  Wire.endTransmission(false) ;

  Wire.requestFrom(mpu_add, 6, true) ;

  gy_x = Wire.read() << 8 | Wire.read() ;

  gy_y = Wire.read() << 8 | Wire.read() ;

  gy_z = Wire.read() << 8 | Wire.read() ;



  deg = atan2(ac_x, ac_z) * 180 / PI ;  //acc data to degree data

  dgy_y = gy_y / 131. ;  //gyro output to



  dt = (double)(micros() - pasttime) / 1000000;

  pasttime = micros();  //convert output to understandable data



  double val = kal.getkalman(deg, dgy_y, dt) ;  //get kalman data
//////////////////////////////////////////////////////////////
    digitalWrite(trig, LOW);
    digitalWrite(echo, LOW);
    delayMicroseconds(2);
    digitalWrite(trig, HIGH);
    delayMicroseconds(10);
    digitalWrite(trig, LOW);
    unsigned long duration = pulseIn(echo, HIGH);     
    float distance = ((float)(340 * duration) / 10000) / 2;   
    //////////////////////////////////////////////////////


   Serial.println("======================================") ;
  Serial.print("Degree : ") ;

  Serial.print(val) ;
  
  Serial.print("\t") ;
  Serial.print("Distance : ");
  
  Serial.print(distance);
  Serial.println("cm");
 
  // 각도값 Y축회전 & 각도 범위 : +-0.25 

  ///////////////////////////
 
///////////////////////////////////////////////////////////////// 조건식 시작
   
 ///////////////경사로일때   
    if(val > 5){
      if(digitalRead(es)==HIGH)  {     ///비상버튼 눌리지않음
   Serial.println("< Emergency\t:\tOFF\t>") ;
      
  Serial.println("Status\t:\t Slope") ;

    if(distance > 30){      //30보다 멀면 출력
     Serial.println("USER\t:\t can't find user");  //30cm 보다 멀어 출력안함
  // 수정한 값을 출력
   digitalWrite(r1,HIGH); //릴레이 작동 x
   digitalWrite(r2,HIGH);
    Serial.println("Relay\t:\t OFF");  
 
  }
  else{
    Serial.println("USER\t:\t Can use motors");  //30cm 보다 가까워 출력
    
  digitalWrite(r1,LOW); //릴레이 작동
  digitalWrite(r2,LOW); //릴레이 작동
   Serial.println("Relay\t:\t ON");      

  }
}
else  //비상버튼 누름
{
  
  Serial.println("< Emergency\t:\tON!!!!!    >");
   digitalWrite(r1,HIGH); //릴레이 작동 x
   digitalWrite(r2,HIGH);
    Serial.println("Relay\t:\t OFF");    
  }
}
///////////경사로일때 끝
    
  else{ //평지일때
   Serial.println("Status\t:\t Flat") ;
      
   digitalWrite(r1,HIGH); //릴레이 작동 x
   digitalWrite(r2,HIGH);
  }
  ////////////////평지일때 끝
    Serial.println("======================================") ;
    delay(5000);
}
